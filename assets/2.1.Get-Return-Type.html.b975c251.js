import{_ as r,r as t,o as l,c as i,a as s,b as o,d as a,e as n,f as p}from"./app.2732c273.js";const d={},u=p(`<h2 id="\u9898\u76EE" tabindex="-1"><a class="header-anchor" href="#\u9898\u76EE" aria-hidden="true">#</a> \u9898\u76EE</h2><p>\u4E0D\u4F7F\u7528 <code>ReturnType</code> \u5B9E\u73B0 <code>TypeScript</code> \u7684 <code>ReturnType&lt;T&gt;</code> \u6CDB\u578B\u3002</p><p>\u4F8B\u5982\uFF1A</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span>v<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">a</span> <span class="token operator">=</span> MyReturnType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> fn<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// \u5E94\u63A8\u5BFC\u51FA &quot;1 | 2&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p align="left"> \u70B9\u51FBgithub\u67E5\u770B\uFF1A <a href="https://github.com/W-HanYu/FE-Typescript/blob/master/vuepress/docs/challenge/2.1.Get-Return-Type.md"><img src="https://img.shields.io/badge/Github-1.8k+-143?logo=typescript&amp;color=3178C6&amp;logoColor=fff"></a></p><h2 id="\u6311\u6218" tabindex="-1"><a class="header-anchor" href="#\u6311\u6218" aria-hidden="true">#</a> \u6311\u6218</h2><p>::: info \u63D0\u793A \u5728\u8FD9\u4E2A\u6311\u6218\u4E2D\uFF0C\u4F60\u9700\u8981\u4FEE\u6539\u4E0B\u65B9\u7684\u4EE3\u7801\u4F7F\u5F97\u6D4B\u8BD5\u901A\u8FC7\uFF08\u4F7F\u5176\u6CA1\u6709\u7C7B\u578B\u9519\u8BEF\uFF09\u3002\u5E76\u4E14\u8BB0\u5F97\u5C06\u7B54\u6848\u5206\u4EAB\u5965\u3002 :::</p>`,7),k=n("br",null,null,-1),h=n("a",{href:"https://github.com/W-HanYu/FE-Typescript/issues/new?assignees=Ustinian&labels=answer&template=2-1-%E5%AE%9E%E7%8E%B0Get-Return-Type.md&title=2-1-%E5%AE%9E%E7%8E%B0Get-Return-Type.md",target:"_blank"},[n("img",{src:"https://6d78-mxm1923893223-ulteh-1302287111.tcb.qcloud.la/-\u5206\u4EAB\u4F60\u7684\u89E3\u7B54-teal.svg?sign=8bb2a2a3bd2b1cc8f86bfd919d53197e&t=1668143704",alt:"\u5206\u4EAB\u4F60\u7684\u89E3\u7B54"})],-1),m=p(`<h2 id="\u89E3\u6790" tabindex="-1"><a class="header-anchor" href="#\u89E3\u6790" aria-hidden="true">#</a> \u89E3\u6790</h2><p>\u5728\u6761\u4EF6\u7C7B\u578B\u4E2D\u4F7F\u7528\u7C7B\u578B\u63A8\u5BFC\u7684 \u7ECF\u9A8C\u6CD5\u5219\u662F\u5F53\u4F60\u4E0D\u786E\u5B9A\u7C7B\u578B\u5FC5\u987B\u662F\u4EC0\u4E48\u7684\u65F6\u5019\u3002\u8FD9\u6B63\u597D\u9002\u7528\u672C\u6B21\u6311\u6218\u7684\u60C5\u51B5\u3002\u6211\u4EEC\u4E0D\u77E5\u9053\u51FD \u6570\u6240\u8FD4\u56DE\u7684\u7C7B\u578B\uFF0C\u4F46\u662F\u6211\u4EEC\u7684\u4EFB\u52A1\u662F\u83B7\u53D6\u5B83\u3002</p><p>\u6211\u4EEC\u6709\u4E00\u4E2A\u5728\u7C7B\u578B\u7CFB\u7EDF\u4E2D\u770B\u8D77\u6765\u4E3A <code>() =&gt; void</code> \u7684\u51FD\u6570\u3002\u4F46\u662F\u6211\u4EEC\u4E0D\u77E5\u9053 <code>void</code> \u7684\u4F4D\u7F6E \u5FC5\u987B\u662F\u4EC0\u4E48\u3002\u6240\u4EE5\u8BA9\u6211\u4EEC\u7528 infer R \u66FF\u6362\u5B83\uFF0C\u8FD9\u5C06\u662F\u6211\u4EEC\u5BF9\u89E3\u51B3\u65B9\u6848\u7684\u7B2C\u4E00\u6B21\u8FED\u4EE3\uFF1A</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">MyReturnType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">infer</span> <span class="token constant">R</span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>\u5982\u679C\u6211\u4EEC\u7684\u7C7B\u578B <code>T</code> \u53EF\u4EE5\u5206\u914D\u7ED9\u51FD\u6570\uFF0C\u6211\u4EEC\u63A8\u65AD\u5B83\u7684\u8FD4\u56DE\u7C7B\u578B\u5E76\u5C06\u5176\u8FD4\u56DE\uFF0C\u5426\u5219\u6211\u4EEC\u8FD4\u56DE <code>T</code> \u672C\u8EAB\u3002\u6BD4\u8F83\u76F4\u622A\u4E86\u5F53\u3002</p><p>\u8FD9\u4E2A\u89E3\u51B3\u65B9\u6848\u7684\u95EE\u9898\u662F\uFF0C\u5982\u679C\u6211\u4EEC\u4F20\u9012\u4E00\u4E2A\u5E26\u53C2\u6570\u7684\u51FD\u6570\uFF0C\u5B83\u5C06\u4E0D\u80FD\u5206\u914D\u7ED9\u6211\u4EEC\u7684\u7C7B\u578B <code>() =&gt; infer R</code>\u3002</p><p>\u8BA9\u6211\u4EEC\u901A\u8FC7\u6DFB\u52A0 <code>...args: any[]</code> \u6765\u8868\u660E\u6211\u4EEC\u53EF\u4EE5\u63A5\u53D7\u4EFB\u4F55\u53C2\u6570\u5E76\u4E14\u6211\u4EEC\u4E0D\u5173\u5FC3\u5B83\u4EEC\uFF1A</p><details class="custom-container details"><summary>\u53C2\u8003\u7B54\u6848</summary><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">MyReturnType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">infer</span> <span class="token constant">R</span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><h2 id="\u53C2\u8003" tabindex="-1"><a class="header-anchor" href="#\u53C2\u8003" aria-hidden="true">#</a> \u53C2\u8003</h2>`,9),y={href:"https://www.typescriptlang.org/docs/handbook/2/conditional-types.html",target:"_blank",rel:"noopener noreferrer"},b={href:"https://www.typescriptlang.org/docs/handbook/2/conditional-types.html#inferring-within-conditional-types",target:"_blank",rel:"noopener noreferrer"};function g(f,v){const c=t("CodeBox"),e=t("ExternalLinkIcon");return l(),i("div",null,[u,s(c,{surl:"https://stackblitz.com/edit/typescript-wgcecz?embed=1&file=2.1.Get-Return-Type.ts&hideExplorer=1&hideNavigation=1&theme=dark&view=editor"}),o("info-footer-start"),k,a(),h,o("info-footer-end"),m,n("ul",null,[n("li",null,[n("a",y,[a("Conditional Types"),s(e)])]),n("li",null,[n("a",b,[a("Type inference in conditional types"),s(e)])])])])}const T=r(d,[["render",g],["__file","2.1.Get-Return-Type.html.vue"]]);export{T as default};
