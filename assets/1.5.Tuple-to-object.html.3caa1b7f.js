import{_ as l,r as t,o as i,c as u,a as s,b as p,d as a,e as n,f as o}from"./app.6b14d0e7.js";const r={},k=o(`<h2 id="\u6311\u6218" tabindex="-1"><a class="header-anchor" href="#\u6311\u6218" aria-hidden="true">#</a> \u6311\u6218</h2><p>\u4F20\u5165\u4E00\u4E2A\u5143\u7EC4\u7C7B\u578B\uFF0C\u5C06\u8FD9\u4E2A\u5143\u7EC4\u7C7B\u578B\u8F6C\u6362\u4E3A\u5BF9\u8C61\u7C7B\u578B\uFF0C\u8FD9\u4E2A\u5BF9\u8C61\u7C7B\u578B\u7684\u952E/\u503C\u90FD\u662F\u4ECE\u5143\u7EC4\u4E2D\u904D\u5386\u51FA\u6765\u3002</p><p>\u4F8B\u5982\uFF1A</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> tuple <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;tesla&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;model 3&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;model X&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;model Y&quot;</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> TupleToObject<span class="token operator">&lt;</span><span class="token keyword">typeof</span> tuple<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// expected { tesla: &#39;tesla&#39;, &#39;model 3&#39;: &#39;model 3&#39;, &#39;model X&#39;: &#39;model X&#39;, &#39;model Y&#39;: &#39;model Y&#39;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u89E3\u7B54" tabindex="-1"><a class="header-anchor" href="#\u89E3\u7B54" aria-hidden="true">#</a> \u89E3\u7B54</h2><p>::: info \u63D0\u793A \u8BF7\u60A8\u5728\u901A\u8FC7\u4FEE\u6539\u7B2C 3 \u884C\uFF0C\u8BA9 \u6D4B\u8BD5\u7528\u4F8B \u884C\u4EE3\u7801\u4E0D\u4F1A\u629B\u51FA\u5F02\u5E38\uFF0C\u5E76\u4E14\u8BB0\u5F97\u5C06\u7B54\u6848\u63D0\u4EA4\u5965\u3002 :::</p>`,6),d=n("br",null,null,-1),m=n("a",{href:"https://github.com/W-HanYu/FE-Typescript/issues/new?assignees=Ustinian&labels=answer&template=1-5-%E5%AE%9E%E7%8E%B0Tuple+to+Object.md&title=1-5-%E5%AE%9E%E7%8E%B0Tuple+to+Object",target:"_blank"},[n("img",{src:"https://6d78-mxm1923893223-ulteh-1302287111.tcb.qcloud.la/-\u5206\u4EAB\u4F60\u7684\u89E3\u7B54-teal.svg?sign=8bb2a2a3bd2b1cc8f86bfd919d53197e&t=1668143704",alt:"\u5206\u4EAB\u4F60\u7684\u89E3\u7B54"})],-1),v=o(`<h2 id="\u89E3\u6790" tabindex="-1"><a class="header-anchor" href="#\u89E3\u6790" aria-hidden="true">#</a> \u89E3\u6790</h2><h3 id="\u4E00\u3001\u5173\u952E\u8BCD\u8BF4\u660E" tabindex="-1"><a class="header-anchor" href="#\u4E00\u3001\u5173\u952E\u8BCD\u8BF4\u660E" aria-hidden="true">#</a> \u4E00\u3001\u5173\u952E\u8BCD\u8BF4\u660E</h3><ul><li>\u5143\u7EC4 \u5728 TypeScript \u4E2D\uFF0C\u5143\u7EC4\u7C7B\u578B\u7528\u6765\u8868\u793A\u5DF2\u77E5\u5143\u7D20\u6570\u91CF\u548C\u7C7B\u578B\u7684\u6570\u7EC4\uFF0C\u5404\u5143\u7D20\u7684\u7C7B\u578B\u4E0D\u5FC5\u76F8\u540C\uFF0C\u5BF9\u5E94\u4F4D\u7F6E\u7684\u7C7B\u578B\u9700\u8981\u76F8\u540C\u3002 \u6570\u7EC4\u5408\u5E76\u4E86\u76F8\u540C\u7C7B\u578B\u7684\u5BF9\u8C61\uFF0C\u800C\u5143\u7EC4\uFF08Tuple\uFF09\u5408\u5E76\u4E86\u4E0D\u540C\u7C7B\u578B\u7684\u5BF9\u8C61\u3002 \u5143\u7956\u53EF\u4EE5\u786E\u5B9A\u5143\u7D20\u6570\u636E\u7C7B\u578B\uFF0C\u4F46\u4E0D\u8981\u8D85\u51FA\u8303\u56F4\uFF0C\u53EF\u4EE5\u628A\u5143\u7956\u7406\u89E3\u4E3A\u56FA\u5B9A\u957F\u5EA6\uFF0C\u8D85\u51FA\u8303\u56F4\u4E0D\u80FD\u4FDD\u8BC1\u5176\u7C7B\u578B\u3002</li><li>typeof \u5173\u952E\u5B57 \u5728 TypeScript \u4E2D\uFF0Ctypeof \u64CD\u4F5C\u7B26\u53EF\u4EE5\u7528\u6765\u83B7\u53D6\u4E00\u4E2A\u53D8\u91CF\u6216\u5BF9\u8C61\u7684\u7C7B\u578B\u3002</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> me<span class="token operator">:</span> People <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;zzk&quot;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">23</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">Me</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> me<span class="token punctuation">;</span> <span class="token comment">// type Me = People</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u590D\u5236\u4EE3\u7801 \u5728\u4E0A\u9762\u4EE3\u7801\u4E2D\uFF0C\u6211\u4EEC\u901A\u8FC7 typeof \u64CD\u4F5C\u7B26\u83B7\u53D6 me \u53D8\u91CF\u7684\u7C7B\u578B\u5E76\u8D4B\u503C\u7ED9 Me \u7C7B\u578B\u53D8\u91CF\uFF0C\u4E4B\u540E\u6211\u4EEC\u5C31\u53EF\u4EE5\u4F7F\u7528 Me \u7C7B\u578B\uFF1A</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> oneGod<span class="token operator">:</span> Me <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;one&quot;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">24</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>\u4F60\u4E5F\u53EF\u4EE5\u5BF9\u5D4C\u5957\u5BF9\u8C61\u6267\u884C\u76F8\u540C\u7684\u64CD\u4F5C\uFF1A</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> otherPeople <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">&quot;one&quot;</span><span class="token punctuation">,</span>
  age<span class="token operator">:</span> <span class="token number">24</span><span class="token punctuation">,</span>
  address<span class="token operator">:</span> <span class="token punctuation">{</span>
    province<span class="token operator">:</span> <span class="token string">&quot;\u5C71\u4E1C&quot;</span><span class="token punctuation">,</span>
    city<span class="token operator">:</span> <span class="token string">&quot;\u9752\u5C9B&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">OtherPeople</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> otherPeople<span class="token punctuation">;</span>
<span class="token comment">/*
 type OtherPeople = {
    name: string;
    age: number;
    address: {
        province: string;
        city: string;
    };
}
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u6B64\u5916\uFF0Ctypeof \u64CD\u4F5C\u7B26\u9664\u4E86\u53EF\u4EE5\u83B7\u53D6\u5BF9\u8C61\u7684\u7ED3\u6784\u7C7B\u578B\u4E4B\u5916\uFF0C\u5B83\u4E5F\u53EF\u4EE5\u7528\u6765\u83B7\u53D6\u51FD\u6570\u5BF9\u8C61\u7684\u7C7B\u578B\uFF0C\u6BD4\u5982\uFF1A</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">toArray</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">Func</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> toArray<span class="token punctuation">;</span> <span class="token comment">// -&gt; (x: number) =&gt; number[]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>as \u5173\u952E\u5B57 \u6709\u65F6\u5019\u4F60\u4F1A\u9047\u5230\u8FD9\u6837\u7684\u60C5\u51B5\uFF0C\u4F60\u4F1A\u6BD4 TypeScript \u66F4\u4E86\u89E3\u67D0\u4E2A\u503C\u7684\u8BE6\u7EC6\u4FE1\u606F\u3002 \u901A\u5E38\u8FD9\u4F1A\u53D1\u751F\u5728\u4F60\u6E05\u695A\u5730\u77E5\u9053\u4E00\u4E2A\u5B9E\u4F53\u5177\u6709\u6BD4\u5B83\u73B0\u6709\u7C7B\u578B\u66F4\u786E\u5207\u7684\u7C7B\u578B\u3002 \u901A\u8FC7\u7C7B\u578B\u65AD\u8A00\u8FD9\u79CD\u65B9\u5F0F\u53EF\u4EE5\u544A\u8BC9\u7F16\u8BD1\u5668\uFF0C\u201C\u76F8\u4FE1\u6211\uFF0C\u6211\u77E5\u9053\u81EA\u5DF1\u5728\u5E72\u4EC0\u4E48\u201D\u3002 \u7C7B\u578B\u65AD\u8A00\u597D\u6BD4\u5176\u5B83\u8BED\u8A00\u91CC\u7684\u7C7B\u578B\u8F6C\u6362\uFF0C\u4F46\u662F\u4E0D\u8FDB\u884C\u7279\u6B8A\u7684\u6570\u636E\u68C0\u67E5\u548C\u89E3\u6784\u3002 \u5B83\u6CA1\u6709\u8FD0\u884C\u65F6\u7684\u5F71\u54CD\uFF0C\u53EA\u662F\u5728\u7F16\u8BD1\u9636\u6BB5\u8D77\u4F5C\u7528\u3002 TypeScript \u4F1A\u5047\u8BBE\u4F60\uFF0C\u7A0B\u5E8F\u5458\uFF0C\u5DF2\u7ECF\u8FDB\u884C\u4E86\u5FC5\u987B\u7684\u68C0\u67E5\u3002 \u7C7B\u578B\u65AD\u8A00\u6709\u4E24\u79CD\u5F62\u5F0F\u3002 \u5176\u4E00\u662F\u201C\u5C16\u62EC\u53F7\u201D\u8BED\u6CD5\uFF1A</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">let</span> someValue<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token string">&quot;this is a string&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> strLength<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span>someValue<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u53E6\u4E00\u4E2A\u4E3A as \u8BED\u6CD5\uFF1A</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">let</span> someValue<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token string">&quot;this is a string&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> strLength<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token punctuation">(</span>someValue <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4E24\u79CD\u5F62\u5F0F\u90FD\u6709\u540C\u6837\u7684\u6548\u679C\uFF1B\u7136\u800C\uFF0C\u5F53\u4F60\u5728 TypeScript \u91CC\u4F7F\u7528 JSX \u65F6\uFF0C\u53EA\u6709 as \u8BED\u6CD5\u65AD\u8A00\u662F\u88AB\u5141\u8BB8\u7684\u3002</p><ul><li>const \u65AD\u8A00 TypeScript 3.4 \u5F15\u5165\u4E86\u4E00\u79CD\u65B0\u7684\u5B57\u9762\u91CF\u6784\u9020\u65B9\u5F0F\uFF0C\u4E5F\u79F0\u4E3A const \u65AD\u8A00\u3002\u5F53\u6211\u4EEC\u4F7F\u7528 const \u65AD\u8A00\u6784\u9020\u65B0\u7684\u5B57\u9762\u91CF\u8868\u8FBE\u5F0F\u65F6\uFF0C\u6211\u4EEC\u53EF\u4EE5\u5411\u7F16\u7A0B\u8BED\u8A00\u53D1\u51FA\u4EE5\u4E0B\u4FE1\u53F7\uFF1A</li></ul><blockquote><p>\u8868\u8FBE\u5F0F\u4E2D\u7684\u4EFB\u4F55\u5B57\u9762\u91CF\u7C7B\u578B\u90FD\u4E0D\u5E94\u8BE5\u88AB\u6269\u5C55\uFF1B \u5BF9\u8C61\u5B57\u9762\u91CF\u7684\u5C5E\u6027\uFF0C\u5C06\u4F7F\u7528 readonly \u4FEE\u9970\uFF1B \u6570\u7EC4\u5B57\u9762\u91CF\u5C06\u53D8\u6210 readonly \u5143\u7EC4\u3002</p></blockquote><p>\u4E0B\u9762\u6211\u4EEC\u6765\u4E3E\u4E00\u4E2A const \u65AD\u8A00\u7684\u4F8B\u5B50\uFF1A</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">X</span></span> <span class="token operator">=</span> <span class="token keyword">typeof</span> x<span class="token punctuation">;</span> <span class="token comment">// type X = &quot;hello&quot;</span>

<span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">Y</span></span> <span class="token operator">=</span> <span class="token keyword">typeof</span> y<span class="token punctuation">;</span> <span class="token comment">// type Y = readonly [10, 20]</span>

<span class="token keyword">let</span> z <span class="token operator">=</span> <span class="token punctuation">{</span> text<span class="token operator">:</span> <span class="token string">&quot;hello&quot;</span> <span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">Z</span></span> <span class="token operator">=</span> <span class="token keyword">typeof</span> z<span class="token punctuation">;</span> <span class="token comment">// let z: { readonly text: &quot;hello&quot;; }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u6570\u7EC4\u5B57\u9762\u91CF\u5E94\u7528 const \u65AD\u8A00\u540E\uFF0C\u5B83\u5C06\u53D8\u6210 readonly \u5143\u7EC4\uFF0C\u4E4B\u540E\u6211\u4EEC\u8FD8\u53EF\u4EE5\u901A\u8FC7 typeof \u64CD\u4F5C\u7B26\u83B7\u53D6\u5143\u7EC4\u4E2D\u5143\u7D20\u503C\u7684\u8054\u5408\u7C7B\u578B\uFF0C\u5177\u4F53\u5982\u4E0B\uFF1A</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Data</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> y<span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// type Data = 10 | 20</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>\u8FD9\u540C\u6837\u9002\u7528\u4E8E\u5305\u542B\u5F15\u7528\u7C7B\u578B\u7684\u6570\u7EC4\uFF0C\u6BD4\u5982\u5305\u542B\u666E\u901A\u7684\u5BF9\u8C61\u7684\u6570\u7EC4\u3002\u8FD9\u91CC\u6211\u4EEC\u4E5F\u6765\u4E3E\u4E00\u4E2A\u5177\u4F53\u7684\u4F8B\u5B50\uFF1A</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> locales <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    locale<span class="token operator">:</span> <span class="token string">&quot;zh-CN&quot;</span><span class="token punctuation">,</span>
    language<span class="token operator">:</span> <span class="token string">&quot;\u4E2D\u6587&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    locale<span class="token operator">:</span> <span class="token string">&quot;en&quot;</span><span class="token punctuation">,</span>
    language<span class="token operator">:</span> <span class="token string">&quot;English&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span>

<span class="token comment">// type Locale = &quot;zh-CN&quot; | &quot;en&quot;</span>
<span class="token keyword">type</span> <span class="token class-name">Locale</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> locales<span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&quot;locale&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u53E6\u5916\u5728\u4F7F\u7528 const \u65AD\u8A00\u7684\u65F6\u5019\uFF0C\u6211\u4EEC\u8FD8\u9700\u8981\u6CE8\u610F\u4EE5\u4E0B\u4E24\u4E2A\u6CE8\u610F\u4E8B\u9879\uFF1A</p><ul><li>const \u65AD\u8A00\u53EA\u9002\u7528\u4E8E\u7B80\u5355\u7684\u5B57\u9762\u91CF\u8868\u8FBE\u5F0F</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// A &#39;const&#39; assertions can only be applied to references to enum members,</span>
<span class="token comment">// or string, number, boolean, array, or object literals.</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0.5</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span> <span class="token comment">// error</span>

<span class="token keyword">let</span> b <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0.5</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>const \u4E0A\u4E0B\u6587\u4E0D\u4F1A\u7ACB\u5373\u5C06\u8868\u8FBE\u5F0F\u8F6C\u6362\u4E3A\u5B8C\u5168\u4E0D\u53EF\u53D8</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span>
  contents<span class="token operator">:</span> arr<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span>

foo<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">;</span> <span class="token comment">// error!</span>
foo<span class="token punctuation">.</span>contents <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// error!</span>

foo<span class="token punctuation">.</span>contents<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ...works!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u4E8C\u3001\u5143\u7EC4\u4F7F\u7528\u65B9\u5F0F" tabindex="-1"><a class="header-anchor" href="#\u4E8C\u3001\u5143\u7EC4\u4F7F\u7528\u65B9\u5F0F" aria-hidden="true">#</a> \u4E8C\u3001\u5143\u7EC4\u4F7F\u7528\u65B9\u5F0F</h3><p>\u5B9A\u4E49\u4E00\u5BF9\u503C\u5206\u522B\u4E3A string \u548C number \u7684\u5143\u7EC4\uFF1A</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">let</span> tom<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Tom&quot;</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>\u5F53\u8D4B\u503C\u6216\u8BBF\u95EE\u4E00\u4E2A\u5DF2\u77E5\u7D22\u5F15\u7684\u5143\u7D20\u65F6\uFF0C\u4F1A\u5F97\u5230\u6B63\u786E\u7684\u7C7B\u578B\uFF1A</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">let</span> tom<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
tom<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Tom&quot;</span><span class="token punctuation">;</span>
tom<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>

tom<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
tom<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4E5F\u53EF\u4EE5\u53EA\u8D4B\u503C\u5176\u4E2D\u4E00\u9879\uFF1A</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">let</span> tom<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
tom<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Tom&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4F46\u662F\u5F53\u76F4\u63A5\u5BF9\u5143\u7EC4\u7C7B\u578B\u7684\u53D8\u91CF\u8FDB\u884C\u521D\u59CB\u5316\u6216\u8005\u8D4B\u503C\u7684\u65F6\u5019\uFF0C\u9700\u8981\u63D0\u4F9B\u6240\u6709\u5143\u7EC4\u7C7B\u578B\u4E2D\u6307\u5B9A\u7684\u9879\u3002</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">let</span> tom<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
tom <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Tom&quot;</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> tom<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
tom <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Tom&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// Property &#39;1&#39; is missing in type &#39;[string]&#39; but required in type &#39;[string, number]&#39;.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u4E09\u3001\u8D8A\u754C\u7684\u5143\u7D20" tabindex="-1"><a class="header-anchor" href="#\u4E09\u3001\u8D8A\u754C\u7684\u5143\u7D20" aria-hidden="true">#</a> \u4E09\u3001\u8D8A\u754C\u7684\u5143\u7D20</h3><p>\u5F53\u6DFB\u52A0\u8D8A\u754C\u7684\u5143\u7D20\u65F6\uFF0C\u5B83\u7684\u7C7B\u578B\u4F1A\u88AB\u9650\u5236\u4E3A\u5143\u7EC4\u4E2D\u6BCF\u4E2A\u7C7B\u578B\u7684\u8054\u5408\u7C7B\u578B\uFF1A</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">let</span> tom<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
tom <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Tom&quot;</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
tom<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;male&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
tom<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Argument of type &#39;true&#39; is not assignable to parameter of type &#39;string | number&#39;.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="custom-container details"><summary>\u7B54\u6848</summary><p>\u6211\u4EEC\u9700\u8981\u4ECE\u6570\u7EC4\u4E2D\u83B7\u53D6\u6240\u6709\u7684\u503C\uFF0C\u5E76\u5C06\u5176\u4F5C\u4E3A\u65B0\u5BF9\u8C61\u4E2D\u7684\u952E\u548C\u503C\u3002</p><p>\u8FD9\u4E2A\u4F7F\u7528\u7D22\u5F15\u7C7B\u578B\u5F88\u5BB9\u6613\u3002\u6211\u4EEC\u53EF\u4EE5\u901A\u8FC7\u4F7F\u7528 T[number]\u4ECE\u6570\u7EC4\u4E2D\u83B7\u53D6\u503C\u3002\u5728\u6620\u5C04\u7C7B\u578B\u7684 \u5E2E\u52A9\u4E0B\uFF0C\u6211\u4EEC\u53EF\u4EE5\u8FED\u4EE3 T[number]\u4E2D\u7684\u8FD9\u4E9B\u503C\uFF0C\u5E76\u8FD4\u56DE\u4E00\u4E2A\u65B0\u7684\u7C7B\u578B\uFF0C\u5176\u4E2D\u952E\u548C\u503C \u662F T[number]\u7684\u7C7B\u578B:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">TupleToObject<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token keyword">readonly</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">K</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><h2 id="\u53C2\u8003" tabindex="-1"><a class="header-anchor" href="#\u53C2\u8003" aria-hidden="true">#</a> \u53C2\u8003</h2>`,42),b={href:"https://www.typescriptlang.org/docs/handbook/2/mapped-types.html",target:"_blank",rel:"noopener noreferrer"},y={href:"https://www.typescriptlang.org/docs/handbook/2/indexed-access-types.html",target:"_blank",rel:"noopener noreferrer"};function g(h,w){const c=t("CodeBox"),e=t("ExternalLinkIcon");return i(),u("div",null,[k,s(c,{surl:"https://stackblitz.com/edit/typescript-wgcecz?embed=1&file=1.5.Tuple-to-Object.ts&hideExplorer=1&hideNavigation=1&theme=dark&view=editor"}),p("info-footer-start"),d,a(),m,p("info-footer-end"),v,n("ul",null,[n("li",null,[n("a",b,[a("Mapped Types"),s(e)])]),n("li",null,[n("a",y,[a("Index Type"),s(e)])])])])}const f=l(r,[["render",g],["__file","1.5.Tuple-to-object.html.vue"]]);export{f as default};
